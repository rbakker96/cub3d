void	turn_right(t_data *data)
{
	OLD_DIR_Y = DIR_Y;
	DIR_Y = DIR_Y * cos(-ROT) - DIR_X * sin(-ROT);
	DIR_X = OLD_DIR_Y * sin(-ROT) + DIR_X * cos(-ROT);
	OLD_PLANE_Y = PLANE_Y;
	PLANE_Y = PLANE_Y * cos(-ROT) - PLANE_X * cos(-ROT);
	PLANE_X = OLD_PLANE_Y * sin(-ROT) + PLANE_X * cos(-ROT);
}

void	turn_left(t_data *data)
{
	OLD_DIR_Y = DIR_Y;
	DIR_Y = DIR_Y * cos(ROT) - DIR_X * sin(ROT);
	DIR_X = OLD_DIR_Y * sin(ROT) + DIR_X * cos(ROT);
	OLD_PLANE_Y = PLANE_Y;
	PLANE_Y = PLANE_Y * cos(ROT) - PLANE_X * cos(ROT);
	PLANE_X = OLD_PLANE_Y * sin(ROT) + PLANE_X * cos(ROT);
}



void	turn_right(t_data *data)
{
	OLD_DIR_X = DIR_X;
	DIR_X = DIR_X * cos(-ROT) - DIR_Y * sin(-ROT);
	DIR_Y = OLD_DIR_X * sin(-ROT) + DIR_Y * cos(-ROT);
	OLD_PLANE_X = PLANE_X;
	PLANE_X = PLANE_X * cos(-ROT) - PLANE_Y * cos(-ROT);
	PLANE_Y = OLD_PLANE_X * sin(-ROT) + PLANE_Y * cos(-ROT);
}

void	turn_left(t_data *data)
{
	OLD_DIR_X = DIR_X;
	DIR_X = DIR_X * cos(ROT) - DIR_Y * sin(ROT);
	DIR_Y = OLD_DIR_X * sin(ROT) + DIR_Y * cos(ROT);
	OLD_PLANE_X = PLANE_X;
	PLANE_X = PLANE_X * cos(ROT) - PLANE_Y * cos(ROT);
	PLANE_Y = OLD_PLANE_X * sin(ROT) + PLANE_Y * cos(ROT);
}




void		initialize_plane(t_data *data)
{
	if (data->spawning_point == 'W')
	{
		PLANE_X = 0;
		PLANE_Y = -0.66;
	}
		if (data->spawning_point == 'E')
	{
		PLANE_X = 0;
		PLANE_Y = 0.66;
	}
		if (data->spawning_point == 'N')
	{
		PLANE_X = 0.66;
		PLANE_Y = 0;
	}
		if (data->spawning_point == 'S')
	{
		PLANE_X = -0.66;
		PLANE_Y = 0;
	}
}



void	start_position(t_data *data)
{
	int		x;
	int		y;

	x = 0;
	while (data->map[x] != 0)
	{
		y = 0;
		while (data->map[x][y] != '\0')
		{
			if (data->map[x][y] == data->spawning_point)
			{
				POS_X = x + 0.5;
				POS_Y = y + 0.5;
				return ;
			}
			y++;
		}
		x++;
	}
	return ;
}
